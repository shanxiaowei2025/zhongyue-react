---
description:
globs:
alwaysApply: false
---
Description: 页面组件编写模式和最佳实践
Globs: src/pages/**/*.tsx

# 页面组件编写模式

页面组件是应用中最高层级的组件，代表路由可访问的完整页面。

## 页面结构

- 页面组件应放置在`src/pages`目录下
- 页面文件名应采用PascalCase，如`UserList.tsx`
- 目录结构应反映路由结构，如`/users/edit`对应`src/pages/users/Edit.tsx`

## 页面模式

- 使用函数组件并定义明确的接口
- 页面状态管理使用`usePageStates` hook进行持久化
- 数据获取使用SWR配合API请求
- 表单处理使用Formik和Yup

## 常见页面类型

### 列表页面模式

```tsx
import React, { useState } from 'react';
import { Table, Card, Form, Input, Button, Space } from 'antd';
import { usePageStates } from '@/hooks/usePageStates';
import { useUserList } from '@/api/user';

const UserList: React.FC = () => {
  // 持久化页面状态
  const [params, setParams] = usePageStates('user-list', {
    keyword: '',
    status: 'all'
  });
  
  // 获取数据
  const { 
    data, 
    total, 
    page, 
    pageSize, 
    isLoading,
    handlePageChange,
    handlePageSizeChange,
    handleParamsChange
  } = useUserList(params);
  
  // 搜索处理
  const handleSearch = (values: any) => {
    handleParamsChange(values);
  };
  
  return (
    <div className="p-4">
      <Card className="mb-4">
        <Form
          layout="inline"
          onFinish={handleSearch}
          initialValues={params}
        >
          <Form.Item name="keyword" label="关键词">
            <Input placeholder="请输入关键词" />
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit">
              搜索
            </Button>
          </Form.Item>
        </Form>
      </Card>
      
      <Card>
        <Table
          columns={columns}
          dataSource={data}
          loading={isLoading}
          pagination={{
            current: page,
            pageSize: pageSize,
            total: total,
            onChange: handlePageChange,
            onShowSizeChange: handlePageSizeChange
          }}
          rowKey="id"
        />
      </Card>
    </div>
  );
};

export default UserList;
```

### 表单页面模式

```tsx
import React from 'react';
import { Card, Button, message } from 'antd';
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import { useNavigate, useParams } from 'react-router-dom';
import { useUserDetail, createUser, updateUser } from '@/api/user';
import { UserForm } from '@/components/UserForm';

const validationSchema = Yup.object({
  username: Yup.string().required('请输入用户名'),
  email: Yup.string().email('邮箱格式不正确').required('请输入邮箱')
});

const UserEdit: React.FC = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const isEdit = Boolean(id);
  
  // 编辑模式下获取用户详情
  const { data, isLoading } = isEdit 
    ? useUserDetail(id) 
    : { data: null, isLoading: false };
  
  // 提交处理
  const handleSubmit = async (values: any) => {
    try {
      if (isEdit) {
        await updateUser(id, values);
        message.success('更新成功');
      } else {
        await createUser(values);
        message.success('创建成功');
      }
      navigate('/users');
    } catch (error) {
      message.error('操作失败');
    }
  };
  
  return (
    <Card title={isEdit ? '编辑用户' : '创建用户'} loading={isLoading}>
      <Formik
        initialValues={data || { username: '', email: '', status: 1 }}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
        enableReinitialize
      >
        {({ isSubmitting }) => (
          <Form>
            <UserForm />
            
            <div className="mt-4 flex justify-end">
              <Button 
                className="mr-2" 
                onClick={() => navigate('/users')}
              >
                取消
              </Button>
              <Button 
                type="primary" 
                htmlType="submit" 
                loading={isSubmitting}
              >
                保存
              </Button>
            </div>
          </Form>
        )}
      </Formik>
    </Card>
  );
};

export default UserEdit;
```
