---
description:
globs:
alwaysApply: false
---
Description: TypeScript类型定义规范
Globs: src/types/**/*.ts, src/**/*.d.ts

# TypeScript类型定义规范

本项目严格使用TypeScript进行开发，遵循以下类型定义规范：

## 类型定义文件组织

- 通用类型定义放在`src/types/index.ts`中
- 模块特定类型放在对应模块的types.ts文件中
- 第三方库扩展类型放在`.d.ts`文件中

## 命名规范

- 接口名使用PascalCase并以`I`开头，如`IUser`
- 类型别名使用PascalCase，如`UserRole`
- 枚举使用PascalCase并以`Enum`结尾，如`StatusEnum`
- 常量类型使用全大写和下划线，如`USER_ROLES`

## 类型定义最佳实践

- 使用接口定义对象结构
- 使用类型别名定义联合类型和复杂类型
- 使用枚举定义有限的常量集合
- 使用泛型增强类型的复用性
- 必要时使用工具类型（Partial, Pick, Omit等）
- 使用函数类型定义处理回调和事件处理器

## 示例

```ts
// 定义枚举
export enum UserStatusEnum {
  Disabled = 0,
  Enabled = 1
}

// 定义接口
export interface IUser {
  id: number;
  username: string;
  email: string;
  status: UserStatusEnum;
  roles: Array<IRole>;
  createdAt: string;
  updatedAt: string;
}

// 定义类型别名
export type UserCreateDto = Omit<IUser, 'id' | 'createdAt' | 'updatedAt'>;
export type UserUpdateDto = Partial<UserCreateDto>;

// 定义函数类型
export type FetchUsersFn = (params: {
  page: number;
  pageSize: number;
  keyword?: string;
  status?: UserStatusEnum;
}) => Promise<{
  data: IUser[];
  total: number;
}>;

// 定义常量类型
export const USER_ROLES = ['admin', 'editor', 'user'] as const;
export type UserRoleType = typeof USER_ROLES[number];
